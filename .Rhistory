distances <- values %*% t(values)
diag(distances) <- 0
dimnames(distances) <- list(LETTERS, LETTERS)
#tests
strings <- list(
cal <- c('C', 'A', 'L'),
stats <- c('S', 'T', 'A', 'T', 'S'),
oski <- c('O', 'S', 'K', 'I'),
zzz <- rep('Z', 3),
lets <- LETTERS,
first <- c('N', 'I', 'C', 'O', 'L', 'E'),
last <- c('Z', 'H', 'U')
)
strings_dists <- c()
for(string in 1:length(strings)) {
strings_dists[string] <- get_dist(distances,strings[[string]])
}
names(strings_dists) <- c("cal", "stats", "oski", "zzz", "lets", "first", "last")
strings_dists
get_dist <- function(distances, ltrs) {
dict_letters <- colnames(distances)
total <- 0
for(i in 1:(length(ltrs) - 1)) {
if (!(ltrs[i] %in% dict_letters) || !(ltrs[i + 1] %in% dict_letters)) {
stop("Unrecognized character")
}
total <- total + distances[ltrs[i], ltrs[i+1]]
}
return(total)
}
num_letters <- length(LETTERS)
set.seed(123)
values <- sample.int(num_letters)
distances <- values %*% t(values)
diag(distances) <- 0
dimnames(distances) <- list(LETTERS, LETTERS)
#tests
strings <- list(
cal <- c('C', 'A', 'L'),
stats <- c('S', 'T', 'A', 'T', 'S'),
oski <- c('O', 'S', 'K', 'I'),
zzz <- rep('Z', 3),
lets <- LETTERS,
first <- c('N', 'I', 'C', 'O', 'L', 'E'),
last <- c('Z', 'H', 'U')
)
strings_dists <- c()
for(string in 1:length(strings)) {
strings_dists[string] <- get_dist(distances,strings[[string]])
}
names(strings_dists) <- c("cal", "stats", "oski", "zzz", "lets", "first", "last")
strings_dists
c(seq(0,15),seq(0,15), seq(0,15))
c(10000,rep(0,15), 10000, rep(0,15), 10000, rep(0,15))
x <- c(10000,rep(0,15), 10000, rep(0,15), 10000, rep(0,15))
y <- c(seq(0,15),seq(0,15), seq(0,15))
length(y)
length(x)
knitr::opts_chunk$set(echo = TRUE)
url <- https://raw.githubusercontent.com/ucb-stat133/stat133-labs/master/data/text-emotion.csv
url <- "https://raw.githubusercontent.com/ucb-stat133/stat133-labs/master/data/text-emotion.csv""
text <- read.table(url, sep=",")
url <- "https://raw.githubusercontent.com/ucb-stat133/stat133-labs/master/data/text-emotion.csv"
text <- read.table(url, sep=",")
text
head(text)
install.packages("stringr")
char <- str_count(text$content, ".")
library(stringr)
url <- "https://raw.githubusercontent.com/ucb-stat133/stat133-labs/master/data/text-emotion.csv"
text <- read.table(url, sep=",")
char <- str_count(text$content, ".")
summary(char)
char
char <- str_count(nchar(text$content))
char
text$content
text
head(text)
library(stringr)
url <- "https://raw.githubusercontent.com/ucb-stat133/stat133-labs/master/data/text-emotion.csv"
text <- read.csv(url, sep=",", header=TRUE)
char
text$content
char <- str_count(nchar(text$content))
text$content
typeof(text$content)
text$content
text$content[1]
library(stringr)
url <- "https://raw.githubusercontent.com/ucb-stat133/stat133-labs/master/data/text-emotion.csv"
text <- read.csv(url, sep=",", header=TRUE,stringsAsFactors = FALSE)
char <- str_count(nchar(text$content))
char
text$content
head(text$content)
char <- str_count(nchar(text$content))
char
char[1]
text$content[1][1]
text$content[1][2]
text$content[1]
char <- nchar(text$content)
char
help(hist)
hist(char, seq(1,145,5))
char
summary(char)
hist(char, seq(1,170,5))
hist(char, breaks=seq(1,170,5))
hist(char)
help(hist)
char
hist(char, freq=true)
hist(char, freq=TRUE)
help(hist)
char
hist(char, freq=TRUE
)
hist(char, freq=TRUE)
hist(char, freq=TRUE
)
hist(char, freq=TRUE, breaks=seq(1,170,5))
hist(char, freq=TRUE, breaks=seq(0,170,5))
0 %in% char
1 %in% char
char[char == 1]
sum(char[char == 1])
sum(char==1)
char[char==1]
text$content[char==1]
text$content
text$content[c(1,2,3)]
char==1
text[char==1]
text[;char==1]
text[,char==1]
text[char==1,]
char==1
text[char==1,]
text$content[char==1]
which[char==1]
which{char==1}
which(char==1)
text$content[which(char==max(char))]
which(char==max(char))
max(char)
text[nchar(text$author) > 15]
text$author[nchar(text$author) > 15]
text$author[str_which(text$author, "\\W")]
text$author[which(text$author == min(nchar(text$author)))]
min(nchar(text$author))
text$author[which(nchar(text$author) == min(nchar(text$author)))]
str_detect(text$content, "\^")
str_detect(text$content, "\\^")
sum(str_detect(text$content, "\\^"))
sum(str_detect(text$content, "\\${3,}"))
sum(str_detect(text$content, "\\$\\$\\$"))
sum(!str_detect(text$content, "a\A"))
sum(!str_detect(text$content, "a|A"))
head(which(!str_detect(text$content, "a|A")), 10)
head(text$content[which(!str_detect(text$content, "a|A"))\, 10)
head(text$content[which(!str_detect(text$content, "a|A"))], 10)
str_count(text$content, "\\!")
summary(exclamation)
exclamation <- str_count(text$content, "\\!")
summary(exclamation)
text$content[str_detect(text$content, "\\!{76}")]
text$content[str_count(text$content, "\\!" == 76)]
text$content[str_count(text$content, "\\!") == 76]
head(text)
unique(text$sentiment)
summarize(group_by(text, sentiment), count = n())
summarise(group_by(text, sentiment), count = n())
library(dplyr)
summarise(group_by(text, sentiment), count = n())
sentiment <- summarise(group_by(text, sentiment), count = n())
sentiment <- sort(summarise(group_by(text, sentiment), count = n()))
sentiment <- summarise(group_by(text, sentiment), count = n())
barplot(sentiment, horizontal = TRUE)
sentiment
table(sentiment)
sentiment
sentiment$count
barplot(sentiment$count, horizontal = TRUE)
barplot(sentiment$count, horiz = TRUE)
barplot(sentiment$count, horiz = TRUE, xlab=sentiment$sentiment)
barplot(sentiment$count, horiz = TRUE, xlab=sentiment$sentiment)
barplot(sentiment$count, horiz = TRUE, names.arg=sentiment$sentiment)
names.arg=sentiment$sentiment)
barplot(sentiment$count, horiz = TRUE, names.arg=sentiment$sentiment)
sentiment <- sort(summarise(group_by(text, sentiment), count = n()))
sentiment <- summarise(group_by(text, sentiment), count = n()) %>% arrange()
barplot(sentiment$count, horiz = TRUE, names.arg=sentiment$sentiment)
sentiment <- summarise(group_by(text, sentiment), count = n()) %>% arrange(desc(n))
help(arrange)
sentiment <- summarise(group_by(text, sentiment), count = n()) %>% arrange(desc(count))
barplot(sentiment$count, horiz = TRUE, names.arg=sentiment$sentiment)
sentiment <- summarise(group_by(text, sentiment), count = n()) %>% arrange(count)
barplot(sentiment$count, horiz = TRUE, names.arg=sentiment$sentiment)
help("group_by")
averages <- summarise(group_by(text, sentiment), content=mean(nchar(content))
averages <- summarise(group_by(text, sentiment), content=mean(nchar(content)))
averages <- summarise(group_by(text, sentiment), content=mean(nchar(content))
averages <- summarise(group_by(text, sentiment), content=mean(nchar(content)))
averages <- summarise(group_by(text, sentiment), mean(nchar(content)))
averages
averages
barplot(sentiment$count, horiz = TRUE, names.arg=abbreviate(sentiment$sentiment))
barplot(sentiment$count, horiz = TRUE, names.arg=abbreviate(sentiment$sentiment), las=1)
# Load the dataset using import() from the rio package. Fix data types and convert categorical data to factors
data <- import("syriandata.csv")
library(rio)
library(ck37r)
library(caret)
# Load the dataset using import() from the rio package. Fix data types and convert categorical data to factors
data <- import("syriandata.csv")
# Load the dataset using import() from the rio package. Fix data types and convert categorical data to factors
data <- import("syriandata.csv")
data['year'] <- as.numeric(unlist(data['year']))
data['month'] <- as.numeric(unlist(data['month']))
data['week_w_in_mo'] <- as.numeric(unlist(data['week_w_in_mo']))
data[c("loc_strike", "weap_type", "perp1", "perp2", "cata_type")] <- lapply(data[c("loc_strike", "weap_type", "perp1", "perp2", "cata_type")], factor)
data <- head(data,-1)
sapply(data, class)
colSums(is.na(data))
data
ck37r::categoricals_to_factors(data,
categoricals = c("ca", "cp", "slope", "thal"),
verbose = TRUE)
ck37r::categoricals_to_factors(data,
categoricals =c("loc_strike", "weap_type", "perp1", "perp2", "cata_type"),
verbose = TRUE)
# Load the dataset using import() from the rio package. Fix data types and convert categorical data to factors
data <- import("syriandata.csv")
data['year'] <- as.numeric(unlist(data['year']))
data['month'] <- as.numeric(unlist(data['month']))
data['week_w_in_mo'] <- as.numeric(unlist(data['week_w_in_mo']))
data <- head(data,-1)
sapply(data, class)
# Load the dataset using import() from the rio package. Fix data types and convert categorical data to factors
data <- import("syriandata.csv")
data['year'] <- as.numeric(unlist(data['year']))
data['month'] <- as.numeric(unlist(data['month']))
data['week_w_in_mo'] <- as.numeric(unlist(data['week_w_in_mo']))
sapply(data, class)
ck37r::categoricals_to_factors(data,
categoricals =c("loc_strike", "weap_type", "perp1", "perp2", "cata_type"),
verbose = TRUE)
data = ck37r::categoricals_to_factors(data,
categoricals =c("loc_strike", "weap_type", "perp1", "perp2", "cata_type"),
verbose = TRUE)
k37r::factors_to_indicators(data, verbose = TRUE)
data = ck37r::categoricals_to_factors(data,
categoricals =c("loc_strike", "weap_type", "perp1", "perp2", "cata_type"),
verbose = TRUE)
ck37r::factors_to_indicators(data, verbose = TRUE)
# Load the dataset using import() from the rio package. Fix data types and convert categorical data to factors
data <- import("syriandata.csv")
data['year'] <- as.numeric(unlist(data['year']))
data['month'] <- as.numeric(unlist(data['month']))
data['week_w_in_mo'] <- as.numeric(unlist(data['week_w_in_mo']))
sapply(data, class)
# Load the dataset using import() from the rio package. Fix data types and convert categorical data to factors
data <- import("syriandata.csv")
data['year'] <- as.numeric(unlist(data['year']))
data['month'] <- as.numeric(unlist(data['month']))
data['week_w_in_mo'] <- as.numeric(unlist(data['week_w_in_mo']))
sapply(data, class)
# Load the dataset using import() from the rio package. Fix data types and convert categorical data to factors
data <- import("syriandata.csv")
data['year'] <- as.numeric(unlist(data['year']))
data['month'] <- as.numeric(unlist(data['month']))
data['week_w_in_mo'] <- as.numeric(unlist(data['week_w_in_mo']))
sapply(data, class)
data
# Load the dataset using import() from the rio package. Fix data types and convert categorical data to factors
data <- import("syriandata.csv")
data['year'] <- as.numeric(unlist(data['year']))
data['month'] <- as.numeric(unlist(data['month']))
data['week_w_in_mo'] <- as.numeric(unlist(data['week_w_in_mo']))
sapply(data, class)
data <- data[,1:14]
# Load the dataset using import() from the rio package. Fix data types and convert categorical data to factors
data <- import("syriandata.csv")
data['year'] <- as.numeric(unlist(data['year']))
data['month'] <- as.numeric(unlist(data['month']))
data['week_w_in_mo'] <- as.numeric(unlist(data['week_w_in_mo']))
sapply(data, class)
data <- data[,1:14]
data
data = ck37r::categoricals_to_factors(data,
categoricals =c("loc_strike", "weap_type", "perp1", "perp2", "cata_type"),
verbose = TRUE)
ck37r::factors_to_indicators(data, verbose = TRUE)
data <- ck37r::categoricals_to_factors(data,
categoricals =c("loc_strike", "weap_type", "perp1", "perp2", "cata_type"),
verbose = TRUE)
data <- ck37r::factors_to_indicators(data, verbose = TRUE)
colSums(is.na(data))
data <- ck37r::categoricals_to_factors(data,
categoricals =c("loc_strike", "weap_type", "perp1", "perp2", "cata_type"),
verbose = TRUE)
data <- ck37r::factors_to_indicators(data, verbose = TRUE)
results <- ck37r::factors_to_indicators(data, verbose = TRUE)
data <- ck37r::categoricals_to_factors(data,
categoricals =c("loc_strike", "weap_type", "perp1", "perp2", "cata_type"),
verbose = TRUE)
# Load the dataset using import() from the rio package. Fix data types and convert categorical data to factors
data <- import("syriandata.csv")
data['year'] <- as.numeric(unlist(data['year']))
data['month'] <- as.numeric(unlist(data['month']))
data['week_w_in_mo'] <- as.numeric(unlist(data['week_w_in_mo']))
sapply(data, class)
data <- data[,1:14]
data
data <- ck37r::categoricals_to_factors(data,
categoricals =c("loc_strike", "weap_type", "perp1", "perp2", "cata_type"),
verbose = TRUE)
results <- ck37r::factors_to_indicators(data, verbose = TRUE)
data <- results$data
colSums(is.na(data))
# Load the dataset using import() from the rio package. Fix data types and convert categorical data to factors
data <- import("syriandata.csv")
data['year'] <- as.numeric(unlist(data['year']))
data['month'] <- as.numeric(unlist(data['month']))
data['week_w_in_mo'] <- as.numeric(unlist(data['week_w_in_mo']))
sapply(data, class)
data <- data[,1:14]
data
data <- ck37r::categoricals_to_factors(data,
categoricals =c("loc_strike", "weap_type", "perp1", "perp2", "cata_type"),
verbose = TRUE)
results <- ck37r::factors_to_indicators(data, verbose = TRUE)
data <- results$data
data[is.na(data)] <- 0
colSums(is.na(data))
# Load the dataset using import() from the rio package. Fix data types and convert categorical data to factors
data <- import("syriandata.csv")
data['year'] <- as.numeric(unlist(data['year']))
data['month'] <- as.numeric(unlist(data['month']))
data['week_w_in_mo'] <- as.numeric(unlist(data['week_w_in_mo']))
sapply(data, class)
data <- data[,1:14]
data
data <- ck37r::categoricals_to_factors(data,
categoricals =c("loc_strike", "weap_type", "perp1", "perp2", "cata_type"),
verbose = TRUE)
results <- ck37r::factors_to_indicators(data, verbose = TRUE)
data <- results$data
data[is.na(data)] <- 0
task_class = list(
data = data,
outcome = "two_week_predict"
)
task_class$covariates = setdiff(names(task_class$data), task_class$outcome)
# Set seed for reproducibility.
set.seed(2)
# Create a stratified random split.
training_rows =
caret::createDataPartition(task_class$data[[task_class$outcome]],
p = 0.70, list = FALSE)
# Partition training dataset
task_class$train_rows = training_rows
# Pull out data for easier analysis.
train_x = task_class$data[task_class$train_rows, task_class$covariates]
train_y = factor(task_class$data[task_class$train_rows, task_class$outcome])
test_x = task_class$data[-task_class$train_rows, task_class$covariates]
test_y = factor(task_class$data[-task_class$train_rows, task_class$outcome])
set.seed(1)
(rf1 = ranger::ranger(train_y ~ .,
data = train_x,
# Number of trees
num.trees = 500,
# Number of variables randomly sampled as candidates at each split.
mtry = 2,
probability = TRUE,
# We want the importance of predictors to be assessed.
importance = "permutation"))
train_x
colnames(data)
colnames(data)[26]
colnames(data)
# Load the dataset using import() from the rio package. Fix data types and convert categorical data to factors
data <- import("syriandata.csv")
data['year'] <- as.numeric(unlist(data['year']))
data['month'] <- as.numeric(unlist(data['month']))
data['week_w_in_mo'] <- as.numeric(unlist(data['week_w_in_mo']))
sapply(data, class)
data <- data[,1:14]
data
# Load the dataset using import() from the rio package. Fix data types and convert categorical data to factors
data <- import("syriandata.csv")
data['year'] <- as.numeric(unlist(data['year']))
data['month'] <- as.numeric(unlist(data['month']))
data['week_w_in_mo'] <- as.numeric(unlist(data['week_w_in_mo']))
sapply(data, class)
data <- data[,1:14]
data
library(rio)
library(ck37r)
library(caret)
# Load the dataset using import() from the rio package. Fix data types and convert categorical data to factors
data <- import("syriandata.csv")
data['year'] <- as.numeric(unlist(data['year']))
data['month'] <- as.numeric(unlist(data['month']))
data['week_w_in_mo'] <- as.numeric(unlist(data['week_w_in_mo']))
sapply(data, class)
data <- data[,1:14]
data
data <- ck37r::categoricals_to_factors(data,
categoricals =c("loc_strike", "weap_type", "perp1", "perp2", "cata_type"),
verbose = TRUE)
results <- ck37r::factors_to_indicators(data, verbose = TRUE)
data <- results$data
colnames(data)[26] <- "weap_type_other_unk"
colnames(data)[37] <- "cata_type_international_diplomatic"
data[is.na(data)] <- 0
task_class = list(
data = data,
outcome = "two_week_predict"
)
task_class$covariates = setdiff(names(task_class$data), task_class$outcome)
# Set seed for reproducibility.
set.seed(2)
# Create a stratified random split.
training_rows =
caret::createDataPartition(task_class$data[[task_class$outcome]],
p = 0.70, list = FALSE)
# Partition training dataset
task_class$train_rows = training_rows
# Pull out data for easier analysis.
train_x = task_class$data[task_class$train_rows, task_class$covariates]
train_y = factor(task_class$data[task_class$train_rows, task_class$outcome])
test_x = task_class$data[-task_class$train_rows, task_class$covariates]
test_y = factor(task_class$data[-task_class$train_rows, task_class$outcome])
train_x
set.seed(1)
(rf1 = ranger::ranger(train_y ~ .,
data = train_x,
# Number of trees
num.trees = 500,
# Number of variables randomly sampled as candidates at each split.
mtry = 2,
probability = TRUE,
# We want the importance of predictors to be assessed.
importance = "permutation"))
vip::vip(rf1)
# Raw data
vip::vi(rf1)
# This will predict the outcome class.
predicted_label = as.integer(predict(rf1, data = test_x)$predictions[, "1"] > 0.5)
str(predicted_label)
table(predicted_label, test_y)
mean(predicted_label == test_y)
# We can also generated probability predictions, which are more granular.
predicted_prob = as.data.frame(predict(rf1, data = test_x)$predictions)
colnames(predicted_prob) = c("no", "yes")
summary(predicted_prob)
ggplot(predicted_prob, aes(x = yes)) + geom_histogram() + theme_minimal()
task_class$covariates
task_class
training_rows
predicted_prob
summary(predicted_prob)
# This will predict the outcome class.
predicted_label = as.integer(predict(rf1, data = test_x)$predictions[, "1"] > 0.5)
str(predicted_label)
table(predicted_label, test_y)
mean(predicted_label == test_y)
# We can also generated probability predictions, which are more granular.
predicted_prob = as.data.frame(predict(rf1, data = test_x)$predictions)
colnames(predicted_prob) = c("no", "yes")
summary(predicted_prob)
ggplot(predicted_prob, aes(x = yes)) + geom_histogram() + theme_minimal()
task_class = list(
data = data,
outcome = "two_week_predict"
)
task_class$covariates = setdiff(names(task_class$data), task_class$outcome)
# Set seed for reproducibility.
set.seed(2)
# Create a stratified random split.
training_rows =
caret::createDataPartition(task_class$data[[task_class$outcome]],
p = 0.70, list = FALSE)
# Partition training dataset
task_class$train_rows = training_rows
x <- "10"
print("hello", x)
print("hello" + x)
print("hello", x)
paste ("Hello", x)
y
y <- bin_variable(5, 0.5)
source('~/binomial/R/hello.R', echo=TRUE)
y <- bin_variable(5, 0.5)
v
y
source('~/binomial/R/hello.R', echo=TRUE)
source('~/binomial/R/hello.R', echo=TRUE)
y
source('~/binomial/R/hello.R', echo=TRUE)
y
source('~/binomial/R/hello.R', echo=TRUE)
bin1 <- bin_variable(10, 0.3)
binsum1 <- summary(bin1)
binsum1
setwd("~/binomial")
source('~/binomial/R/hello.R', echo=TRUE)
bin_mode(10,0.3)
source('~/binomial/tests/testthat/testthat.R', echo=TRUE)
